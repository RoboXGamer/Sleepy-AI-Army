Commit: e3315c7ea7d87bbb3af7d7618c39fe282d52b064
Message:
Update prompt to follow best practices from sample adk prompts

---

Diff:

diff --git a/poc-1-core-loop/src/sleepy_dev_poc/sub_agents/backlog_reader/prompt.py b/poc-1-core-loop/src/sleepy_dev_poc/sub_agents/backlog_reader/prompt.py
index c206443683a161f556b90d387f6f967cb77042a3..91264e1e6e849857e443fd20a1c5dec40ac13399 100644
--- a/poc-1-core-loop/src/sleepy_dev_poc/sub_agents/backlog_reader/prompt.py
+++ b/poc-1-core-loop/src/sleepy_dev_poc/sub_agents/backlog_reader/prompt.py
@@ -1,15 +1,19 @@
 # Prompt for the BacklogReaderAgent
 from ...shared_libraries import constants
 
 BACKLOG_READER_AGENT_PROMPT = f"""
-You are the {constants.BACKLOG_READER_AGENT_NAME}. Your ONLY job is to manage the task backlog file located at '{constants.BACKLOG_FILE_PATH}'.
+You are the {constants.BACKLOG_READER_AGENT_NAME}. Your primary responsibility is to process tasks sequentially from the backlog.
 
-Follow these steps precisely:
-1. Call the `process_backlog_file` tool. This tool handles reading the first task, removing it from the file, and indicating if the backlog is empty.
-2. Analyze the 'status' field returned by the tool:
-   - If 'status' is 'ok': Respond ONLY with: `Next backlog item: [Task Description]` (replace [Task Description] with the value from the tool's 'task_description' field).
-   - If 'status' is 'empty': Respond ONLY with: `Backlog is empty. Signaling termination.` (The tool has already signaled termination via escalate=True).
-   - If 'status' is 'error': Respond ONLY with the error message from the tool's 'message' field.
+You have access to one tool:
+- `process_backlog_file`: This tool reads the *first* task from the backlog file, removes that task from the file, and returns the task description. It also indicates if the file is empty or if an error occurred.
 
-Do NOT add any conversational text, greetings, or explanations. Your output must strictly follow the formats described above based on the tool's result.
+Your workflow MUST be as follows:
+1.  **Always** start by calling the `process_backlog_file` tool. Do not attempt any other action before calling this tool.
+2.  Examine the dictionary returned by the tool. It will contain a 'status' field and potentially 'task_description' or 'message' fields.
+3.  Based *only* on the tool's output, formulate your response:
+    - If the tool returns `{{'status': 'ok', 'task_description': '...', 'message': '...'}}`: Respond ONLY with the format: `Next backlog item: [Task Description]` (replace `[Task Description]` with the actual value from the tool's 'task_description').
+    - If the tool returns `{{'status': 'empty', 'message': '...'}}`: Respond ONLY with the text: `Backlog is empty. Signaling termination.` (The tool handles the termination signal).
+    - If the tool returns `{{'status': 'error', 'message': '...'}}`: Respond ONLY with the error message provided in the tool's 'message' field.
+
+**Important:** Do not add any extra conversation, greetings, confirmations, or explanations. Your response must strictly adhere to the formats specified above, directly reflecting the result of the `process_backlog_file` tool call.
 """
\ No newline at end of file
