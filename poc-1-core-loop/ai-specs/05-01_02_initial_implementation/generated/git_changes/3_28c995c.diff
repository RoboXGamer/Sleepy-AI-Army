Commit: 28c995c25e449d9c8529beb89d2037d775dd2c1d
Message:
Update backlog reader tool to use absolute path for PoC

---

Diff:

diff --git a/poc-1-core-loop/src/sleepy_dev_poc/shared_libraries/constants.py b/poc-1-core-loop/src/sleepy_dev_poc/shared_libraries/constants.py
index d5aa1920b0ad55d898cbd0c5203e9c527222cdf4..a4bbecabba5daee1802483ba4717b9acd24d9c86 100644
--- a/poc-1-core-loop/src/sleepy_dev_poc/shared_libraries/constants.py
+++ b/poc-1-core-loop/src/sleepy_dev_poc/shared_libraries/constants.py
@@ -1,21 +1,18 @@
 # Constants for the Sleepy Dev Team PoC
 import os
 
 # --- Core Configuration ---
 ROOT_AGENT_NAME = "SleepyDev_RootAgent_PoC"
 BACKLOG_READER_AGENT_NAME = "BacklogReaderAgent_PoC"
 
 # Path to the backlog file (as specified in PRD).
 # Using an absolute path starting from root. Adjust if needed.
 # Ensure this path is accessible from where the agent runs.
-# NOTE: The tech spec uses an absolute path "/ai-tasks/backlog.md".
-# This might cause issues on Windows or if the execution context isn't the project root.
-# Using a relative path from the project root is generally safer.
-# Assuming the agent runs from the project root (where ai-tasks/ exists).
-BACKLOG_FILE_PATH = "ai-tasks/backlog.md" # Adjusted to relative path
+# TODO: Update this to be gathered when we specify which project we want it to work on
+BACKLOG_FILE_PATH = "C:\\GithubRepos\\Sleepy-Dev-Team\\poc-1-core-loop\\ai-tasks\\backlog.md"
 
 # --- Optional Configuration ---
 # Specify a model if LlmAgent is used and needs specific reasoning capabilities.
 # For this PoC, a basic/free model might suffice, or even no model if using BaseAgent.
 # Using gemini-2.0-flash as per best practices.
 MODEL_NAME = "gemini-2.0-flash"
\ No newline at end of file
diff --git a/poc-1-core-loop/src/sleepy_dev_poc/sub_agents/backlog_reader/tools.py b/poc-1-core-loop/src/sleepy_dev_poc/sub_agents/backlog_reader/tools.py
index c187f7928744e0f48baf1b0134fb1c9f6badef82..01acd10bdf166906546a91b5deac05649e0257d4 100644
--- a/poc-1-core-loop/src/sleepy_dev_poc/sub_agents/backlog_reader/tools.py
+++ b/poc-1-core-loop/src/sleepy_dev_poc/sub_agents/backlog_reader/tools.py
@@ -24,88 +24,90 @@ def process_backlog_file(tool_context: Optional[ToolContext] = None) -> Dict[str
         tool_context: The ADK ToolContext, automatically injected by the framework.
                       Crucial for setting actions.escalate.
 
     Returns:
         A dictionary containing:
         - 'status': 'ok', 'empty', or 'error'
         - 'task_description': The content of the first line (if status is 'ok')
         - 'message': A descriptive message about the outcome or error.
     """
     file_path = constants.BACKLOG_FILE_PATH
-    logger.info(f"{constants.BACKLOG_READER_AGENT_NAME} - Tool: Processing backlog file: {file_path}")
+    abs_file_path = os.path.abspath(file_path) # Get absolute path
+    logger.info(f"{constants.BACKLOG_READER_AGENT_NAME} - Tool: Processing backlog file relative path: {file_path}")
+    logger.info(f"{constants.BACKLOG_READER_AGENT_NAME} - Tool: Attempting to access absolute path: {abs_file_path}") # Log absolute path
 
     # --- Context Check ---
     if tool_context is None:
          logger.error(f"{constants.BACKLOG_READER_AGENT_NAME} - Tool: ToolContext was not provided. Cannot escalate.")
          # Cannot escalate without context, return error status but loop might continue incorrectly.
          return {"status": "error", "message": "Critical Error: ToolContext is missing."}
 
     try:
         # --- File Check ---
-        # Check if the file exists and is not empty
-        if not os.path.exists(file_path) or os.path.getsize(file_path) == 0:
-            logger.info(f"{constants.BACKLOG_READER_AGENT_NAME} - Tool: Backlog file is empty or does not exist at '{file_path}'. Signaling escalation.")
+        # Check if the file exists and is not empty using the absolute path
+        if not os.path.exists(abs_file_path) or os.path.getsize(abs_file_path) == 0:
+            logger.info(f"{constants.BACKLOG_READER_AGENT_NAME} - Tool: Backlog file is empty or does not exist at absolute path '{abs_file_path}'. Signaling escalation.")
             # Signal to the LoopAgent to stop
             tool_context.actions.escalate = True
             return {"status": "empty", "message": "Backlog is empty or not found."}
 
         # --- Read and Modify File ---
         lines = []
         try:
             # Ensure the directory exists before trying to open the file
             # This check is redundant if os.path.exists passed, but good practice
             file_dir = os.path.dirname(file_path)
             if file_dir and not os.path.exists(file_dir):
                  logger.warning(f"{constants.BACKLOG_READER_AGENT_NAME} - Tool: Directory '{file_dir}' for backlog file does not exist. Attempting to read anyway.")
                  # Proceed to let the open() call handle the FileNotFoundError if the dir is truly missing
 
-            with open(file_path, 'r', encoding='utf-8') as f:
+            with open(abs_file_path, 'r', encoding='utf-8') as f: # Use absolute path
                 lines = f.readlines()
         except FileNotFoundError:
-            # This case should ideally be caught by the initial os.path.exists check,
+            # This case should ideally be caught by the initial os.path.exists check using abs_file_path,
             # but handle it defensively.
-            logger.info(f"{constants.BACKLOG_READER_AGENT_NAME} - Tool: Backlog file not found during read at '{file_path}'. Signaling escalation.")
+            logger.info(f"{constants.BACKLOG_READER_AGENT_NAME} - Tool: Backlog file not found during read at absolute path '{abs_file_path}'. Signaling escalation.")
             tool_context.actions.escalate = True
             return {"status": "empty", "message": "Backlog file not found."}
 
 
         if not lines: # Double-check if file was empty after opening (e.g., race condition or empty file)
-             logger.info(f"{constants.BACKLOG_READER_AGENT_NAME} - Tool: Backlog file at '{file_path}' contained no lines after opening. Signaling escalation.")
+             logger.info(f"{constants.BACKLOG_READER_AGENT_NAME} - Tool: Backlog file at absolute path '{abs_file_path}' contained no lines after opening. Signaling escalation.")
              tool_context.actions.escalate = True
              return {"status": "empty", "message": "Backlog file is empty."}
 
         # Get the first line and remove leading/trailing whitespace (incl. newline)
         first_line = lines[0].strip()
         remaining_lines = lines[1:] # Get all lines except the first
 
         # Rewrite the file with the remaining lines
         # Ensure the directory exists before writing
         file_dir = os.path.dirname(file_path)
         if file_dir and not os.path.exists(file_dir):
             try:
                 os.makedirs(file_dir)
                 logger.info(f"{constants.BACKLOG_READER_AGENT_NAME} - Tool: Created directory '{file_dir}' for backlog file.")
             except OSError as e:
                  logger.error(f"{constants.BACKLOG_READER_AGENT_NAME} - Tool: Failed to create directory '{file_dir}': {e}. Cannot write file.")
                  tool_context.actions.escalate = True # Escalate as we cannot modify the file
                  return {"status": "error", "message": f"Failed to create directory for backlog file: {e}"}
 
 
-        with open(file_path, 'w', encoding='utf-8') as f:
+        with open(abs_file_path, 'w', encoding='utf-8') as f: # Use absolute path
             f.writelines(remaining_lines)
             # Ensure newline at end of file if remaining_lines is not empty
             if remaining_lines and not remaining_lines[-1].endswith('\n'):
                  f.write('\n')
             # If remaining_lines is empty, the file should be empty (no newline needed)
 
 
         logger.info(f"{constants.BACKLOG_READER_AGENT_NAME} - Tool: Successfully processed task: '{first_line}'")
         # IMPORTANT: Ensure escalation is FALSE if a task was processed
         tool_context.actions.escalate = False
         return {"status": "ok", "task_description": first_line, "message": "Task processed successfully."}
 
     except Exception as e:
-        logger.error(f"{constants.BACKLOG_READER_AGENT_NAME} - Tool: Error processing backlog file {file_path}: {e}", exc_info=True)
+        logger.error(f"{constants.BACKLOG_READER_AGENT_NAME} - Tool: Error processing backlog file at absolute path {abs_file_path}: {e}", exc_info=True) # Log absolute path in error
         # Signal escalation on error to prevent potential infinite loops
         if tool_context: # Check again in case error happened before context check
              tool_context.actions.escalate = True
         return {"status": "error", "message": f"An error occurred: {str(e)}"}
\ No newline at end of file
