Commit: 11ea88e23f1e4e65c8b2dc8ecf02fbdacb832fa9
Message:
Rework the task_setup_agent to be a ToolAgent so it automatically passes back to the orchestrator

---

Diff:

diff --git a/poc-2-task-orchestrator/src/sleepy_dev_poc/agent.py b/poc-2-task-orchestrator/src/sleepy_dev_poc/agent.py
index d667f3ce57cfdc9ef4ba027eb1da2fa9aa3a68c7..f1de7976a5adbc3f6587ed1652b748eaa539b14e 100644
--- a/poc-2-task-orchestrator/src/sleepy_dev_poc/agent.py
+++ b/poc-2-task-orchestrator/src/sleepy_dev_poc/agent.py
@@ -1,26 +1,27 @@
 import logging
 from google.adk.agents import LlmAgent
+from google.adk.tools.agent_tool import AgentTool
 
 # Import constants and sub-agent instance
 from .shared_libraries import constants
 from . import prompt as sto_prompt
 from .sub_agents.task_setup_agent.agent import task_setup_agent # Import the instance
 
 # Configure logging
 logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
 logger = logging.getLogger(__name__)
 
 # --- Agent Definition ---
 # Define the root agent as a standard LlmAgent.
 # The routing logic (analyzing input and deciding whether to delegate or respond directly)
 # is now driven by the prompt in prompt.py.
 root_agent = LlmAgent(
     name=constants.ROOT_AGENT_NAME,
     model=constants.MODEL_NAME,
     instruction=sto_prompt.STO_PROMPT,
-    sub_agents=[task_setup_agent], # Make the sub-agent available for delegation
+	tools=[AgentTool(agent=task_setup_agent)],
     description="Analyzes user input via LLM. Routes new tasks to TaskSetupAgent or responds directly if task exists.",
     # No tools needed directly by this agent; LLM uses prompt to decide flow.
 )
 
-logger.info(f"Initialized {constants.ROOT_AGENT_NAME} with model {constants.MODEL_NAME}")
\ No newline at end of file
+logger.info(f"Initialized {constants.ROOT_AGENT_NAME} with model {constants.MODEL_NAME}")
diff --git a/poc-2-task-orchestrator/src/sleepy_dev_poc/sub_agents/task_setup_agent/agent.py b/poc-2-task-orchestrator/src/sleepy_dev_poc/sub_agents/task_setup_agent/agent.py
index 39a471fd2636c4e256afbc8dedb35e22651cd82c..622dd029b91c7ce7b1343bd9665c6ce5f51f6477 100644
--- a/poc-2-task-orchestrator/src/sleepy_dev_poc/sub_agents/task_setup_agent/agent.py
+++ b/poc-2-task-orchestrator/src/sleepy_dev_poc/sub_agents/task_setup_agent/agent.py
@@ -20,19 +20,21 @@ get_next_task_number_tool = FunctionTool(func=get_next_task_number)
 create_directory_tool = FunctionTool(func=create_directory)
 write_file_tool = FunctionTool(func=write_file)
 
 # --- Agent Definition ---
 # Define the agent as a standard LlmAgent.
 # The orchestration logic is now driven by the prompt in prompt.py
 task_setup_agent = LlmAgent(
     name=constants.TASK_SETUP_AGENT_NAME,
     model=constants.MODEL_NAME,
     instruction=tsa_prompt.TASK_SETUP_AGENT_PROMPT,
+	disallow_transfer_to_parent=True,
+    disallow_transfer_to_peers=True,
     tools=[ # Tools the LLM can orchestrate
         get_next_task_number_tool,
         create_directory_tool,
         write_file_tool,
     ],
     description="Generates prefix/slug, gets next number, creates task folder/files by orchestrating tools based on instructions.",
 )
 
 logger.info(f"Initialized {constants.TASK_SETUP_AGENT_NAME} with model {constants.MODEL_NAME}")
\ No newline at end of file
diff --git a/poc-2-task-orchestrator/src/sleepy_dev_poc/sub_agents/task_setup_agent/prompt.py b/poc-2-task-orchestrator/src/sleepy_dev_poc/sub_agents/task_setup_agent/prompt.py
index 820e06c140ea4af6f88b2ef10d0bfdf47bff9e44..feae14fe1285f0007f84deef53150a5070fbbca0 100644
--- a/poc-2-task-orchestrator/src/sleepy_dev_poc/sub_agents/task_setup_agent/prompt.py
+++ b/poc-2-task-orchestrator/src/sleepy_dev_poc/sub_agents/task_setup_agent/prompt.py
@@ -37,12 +37,12 @@ You are the Task Setup Agent. Your goal is to create a standardized task folder
     *   Construct the file path: `<full_task_folder_path>/changelog.md`.
     *   Provide the `content` argument as: `# Changelog\n\n`.
     *   Set `overwrite` to `False`.
     *   Handle potential errors reported by the tool (but continue to the next step even if this fails).
 8.  **Create Task Description File:**
     *   Call the `write_file` tool again.
     *   Construct the file path: `<full_task_folder_path>/task_description.md`.
     *   Provide the `content` argument using the original task description.
     *   Set `overwrite` to `False`.
     *   Handle potential errors reported by the tool. If this step fails, report the failure clearly.
-9.  **Final Response:** If all steps involving directory and task_description.md creation were successful, respond with a confirmation message: "Successfully created task folder: <full_task_folder_path>". If any critical step failed (like creating the directory or task_description.md), report the error clearly.
+9.  **Response:** If all steps involving directory and task_description.md creation were successful, respond with a confirmation message: "Successfully created task folder: <full_task_folder_path>". If any critical step failed (like creating the directory or task_description.md), report the error clearly.
 """
\ No newline at end of file
